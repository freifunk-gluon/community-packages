#!/usr/bin/lua

if not arg[1] then
	print("Error: No /dev/tty* path specified. Please provide a TTY device path as the first argument.")
	os.exit(1)
end

local uci = require('simple-uci').cursor()
local bit = require 'bit'
local fcntl = require 'posix.fcntl'
local unistd = require 'posix.unistd'

-- Get GPS device tty
local tty_device = arg[1]

-- Use GPS as Stream
local file = io.open(tty_device, "r")
if not file then
	print("Error: Unable to open " .. tty_device)
	os.exit(2)
end

local lockfilename = "/var/lock/update-location-gps_" .. string.gsub(tty_device, "/", "_")

local lockfd, err = fcntl.open(lockfilename, bit.bor(fcntl.O_WRONLY, fcntl.O_CREAT), 384) -- mode 0600
if not lockfd then
	print('err', err)
	local err_verbose = string.format("Unable to get file descriptor for lock file %s .", lockfilename)
	print('err', err_verbose)
	os.exit(1)
end

local ok, _ = fcntl.fcntl(lockfd, fcntl.F_SETLK, {
	l_start = 0,
	l_len = 0,
	l_type = fcntl.F_WRLCK,
	l_whence = unistd.SEEK_SET,
})
if not ok then
	-- silent as this is run in cron
	os.exit(1)
end

local line_count = 0
local max_lines = 50

while line_count < max_lines do
	local this_line = file:read("*line")
	if not this_line then break end  -- Exit loop if no more lines

	line_count = line_count + 1  -- Increment the line counter

	local nc = this_line:match("^([^,]+)")

	if nc == '$GPRMC' or nc == '$GNRMC' then
		local fields = {}
		for field in this_line:gmatch("([^,]+)") do
			table.insert(fields, field)
		end

		local valid = fields[3]

		if valid == "A" then
			-- First: Retrieve coordinate
			local lat = fields[4]
			local lon = fields[6]

			-- Second: Determine if coordinate is oriented North/South or East/West
			local latdir = fields[5]
			local londir = fields[7]

			-- Split DEGREES from coordinate
			local latdeg = tonumber(lat:sub(1, 2))
			local londeg = tonumber(lon:sub(1, 3))

			-- Split MINUTES.SECONDS from coordinate
			local latmin = tonumber(lat:sub(3))
			local lonmin = tonumber(lon:sub(4))

			-- Convert from Degree-Minutes to Decimal-Minutes
			local latdec = latmin / 60
			local londec = lonmin / 60

			-- Use negative notation instead of North/South or East/West
			if latdir == 'S' then
				latdeg = -latdeg
			end
			if londir == 'W' then
				londeg = -londeg
			end
			lat = string.format("%f", latdeg + latdec)
			lon = string.format("%f", londeg + londec)

			print("GPS position is valid Lat/Lon:", lat, lon)
			-- set temp location in gluon-node-info
			uci:set('gluon-node-info', '@location[0]', 'latitude', lat)
			uci:set('gluon-node-info', '@location[0]', 'longitude', lon)
			uci:save('gluon-node-info')
			-- Link to Phip's comment: https://forum.freifunk.net/t/freifunk-location-update-via-gps/1493/2
			-- Committing here would wear out the nvram very fast, so it should not be done.
			break
		else
			print("GPS position is Invalid...", valid)
			break
		end
	end
end

file:close()
os.exit(0)
